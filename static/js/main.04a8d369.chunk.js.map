{"version":3,"sources":["components/cards/Cards.module.css","components/cards/Cards.jsx","api/index.js","components/chart/Chart.jsx","components/country-picker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/chart/Chart.module.css","components/country-picker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","convertDay","Date","toDateString","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","labelInfected","variant","gutterBottom","start","end","value","duration","separator","color","labelRecovered","labelDeaths","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04a8d369.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2NBcK\",\"card\":\"Cards_card__1ICho\",\"infected\":\"Cards_infected__1mwx0\",\"recovered\":\"Cards_recovered__3PH58\",\"deaths\":\"Cards_deaths__1mvPz\",\"labelInfected\":\"Cards_labelInfected__2MHue\",\"labelRecovered\":\"Cards_labelRecovered___W-r0\",\"labelDeaths\":\"Cards_labelDeaths__3-bjg\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'loading..';\r\n    }\r\n\r\n    const convertDay = new Date(lastUpdate).toDateString();\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography className={styles.labelInfected} variant=\"h6\" gutterBottom>Terkonfirmasi</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{convertDay}</Typography>\r\n                        <Typography variant=\"body2\">Jumlah orang yang terkonfirmasi kasus covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography className={styles.labelRecovered} variant=\"h6\" gutterBottom>Sembuh</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{convertDay}</Typography>\r\n                        <Typography variant=\"body2\">Jumlah orang yang berhasil sembuh dari covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography className={styles.labelDeaths} variant=\"h6\" gutterBottom>Meninggal</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{convertDay}</Typography>\r\n                        <Typography variant=\"body2\">Jumlah orang yang meninggal karena covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if (country) {\r\n        changeableUrl = url + '/countries/' + country;\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(url + '/daily');\r\n\r\n        const modifyData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifyData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(url + '/countries');\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    const barChart = (\r\n        confirmed\r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Terinfeksi', 'Sembuh', 'Meninggal'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: [\r\n                                'rgba(0, 0, 255, 0.5)',\r\n                                'rgba(0, 255, 0, 0.5)',\r\n                                'rgba(255, 0, 0, 0.5)',\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: 'Kondisi saat ini di ' + country }\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} >\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\nimport './App.css';\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container} >\n        <img className={styles.image} src={coronaImage} alt=\"covid-19\" />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Cards data={data} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Dd2V8\",\"image\":\"App_image__2AC7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3HHLO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Dn0O\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}